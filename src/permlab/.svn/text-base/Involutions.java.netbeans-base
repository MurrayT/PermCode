package permlab;

import java.util.Iterator;
import permlab.property.HereditaryProperty;
import permlab.property.Universal;

/**
 *
 * @author Michael Albert
 */
public class Involutions implements Iterable<Permutation> {
    
    private HereditaryProperty definingProperty;
    private InvolutionPermClass involutionClass;
    private int low;
    private int high;

    public Involutions(int low, int high, HereditaryProperty definingProperty) {
        this.definingProperty = definingProperty;
        this.low = low;
        this.high = high;
        involutionClass = new InvolutionPermClass(definingProperty);
    }
    
    public Involutions(int low, int high, InvolutionPermClass involutionClass) {
        this.involutionClass = involutionClass;
        this.low = low;
        this.high = high;
    }
    
    public Involutions(int n, InvolutionPermClass involutionClass) {
        this(n, n, involutionClass);
    }
    
    public Involutions(int n, Permutation... basis) {
        this(n, n, new InvolutionPermClass(basis));
    }
    
    public Involutions(int low, int high, Permutation... basis) {
        this(low, high, new InvolutionPermClass(basis));
    }
    
    public Involutions(int low, int high) {
        this(low, high, new Universal());
    }
    
    public Involutions(int n, HereditaryProperty definingProperty) {
        this(n, n, definingProperty);
    }
    
    
    public Involutions(int n) {
        this(n, n, new Universal());
    }
    

    @Override
    public Iterator<Permutation> iterator() {
        return(involutionClass.getIterator(low, high));
    }
    
    public static void main(String[] args) {
        int n = 15;
        int[] counts = new int[n+1];
        for(Permutation p : new Involutions(0,n, new Permutation("1342"))) {
             counts[p.length()]++;
        }
        for(int c : counts) System.out.print(c + " ");
        System.out.println();
    }
}
