package permlab.ui;

import permlab.utilities.ExportType;

import javax.swing.*;

import permlab.utilities.ExportInterface;

/**
 * Represents an export dialogue box to give options for outputting the
 * displayed element in various formats.
 * 
 * @author M Belton
 */
public class ExportDialog extends JDialog {

    private ExportInterface e = null;
    public static boolean saveAsFile = false;
    private static ExportInterface lastSelectedFromat = null;

    /**
     * Creates new ExportDialog.
     * 
     * @param parent the frame that has called this box
     * @param modal sets the modality of the box
     */
    public ExportDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(parent);
    }

    /**
     * Returns the export interface selected
     * 
     * @return the selected export interface
     */
    public ExportInterface getExportInterface() {
        return e;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new JLabel();
        ExportType[] options = ExportType.values();
        formatOptions = new JComboBox(options);
        jLabel2 = new JLabel();
        cancelButton = new JButton();
        okButton = new JButton();
        fileRadioButton = new JRadioButton();
        textRadioButton = new JRadioButton();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Export");
        setBounds(new java.awt.Rectangle(0, 22, 183, 163));

        jLabel1.setText("Choose your export format:");

        formatOptions.setModel(new DefaultComboBoxModel(options));
        if (lastSelectedFromat != null) {
            formatOptions.setSelectedItem(lastSelectedFromat);
        } else {
            formatOptions.setSelectedItem(options[0]);
        }
        updateExportLocations();
        formatOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formatOptionsActionPerformed(evt);
            }
        });

        jLabel2.setText("Export to...");

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        fileRadioButton.setText("File");
        fileRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileRadioButtonActionPerformed(evt);
            }
        });

        textRadioButton.setText("Text window");
        textRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textRadioButtonActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addContainerGap(112, Short.MAX_VALUE))
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(cancelButton)
                                .addGap(18, 18, 18)
                                .addComponent(okButton, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE))
                            .addGroup(GroupLayout.Alignment.TRAILING, layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(fileRadioButton)
                                .addComponent(formatOptions, GroupLayout.PREFERRED_SIZE, 134, GroupLayout.PREFERRED_SIZE))))
                    .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(textRadioButton, GroupLayout.PREFERRED_SIZE, 134, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formatOptions, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(fileRadioButton))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textRadioButton)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Sets the selected export type. This also saves the selected type so it is
     * remembered as the first choice the next time the user exports.
     * 
     * @param evt the event of the ok button being pressed
     */
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        e = (ExportType) formatOptions.getSelectedItem();
        saveAsFile = !textRadioButton.isSelected();
        //saveAsFile = (boolean) "file".equals((String) exportLocations.getSelectedItem());
        lastSelectedFromat = e;
        this.setVisible(false);
    }//GEN-LAST:event_okButtonActionPerformed

    /**
     * Manages which options are available.
     */
    private void updateExportLocations() {
        if (formatOptions.getSelectedItem() == ExportType.PSTricks
                || formatOptions.getSelectedItem() == ExportType.TikZ) {
            selectButton(textRadioButton);
            textRadioButton.setEnabled(true);
        } else {
            selectButton(fileRadioButton);
            textRadioButton.setEnabled(false);
        }
    }
    
    /**
     * Toggles options based on radio button selection.
     * 
     * @param button the button to consider
     */
    private void selectButton(JRadioButton button) {
        button.setSelected(true);
        if (button == fileRadioButton) {
            textRadioButton.setSelected(false);
        } else {
            fileRadioButton.setSelected(false);
        }
    }
    
    /**
     * Manages which formats are available.
     * 
     * @param evt responds to formats options being changed
     */
    private void formatOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formatOptionsActionPerformed
        updateExportLocations();
    }//GEN-LAST:event_formatOptionsActionPerformed

    /**
     * Stops the export.
     * 
     * @param evt responds to cancelling the export.
     */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        e = null;
        this.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Sets options for saving as a file.
     * 
     * @param evt responds to file radio button being selected
     */
    private void fileRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileRadioButtonActionPerformed
        selectButton(fileRadioButton);
    }//GEN-LAST:event_fileRadioButtonActionPerformed

    /**
     * Sets options for saving as a text frame.
     * 
     * @param evt responds to text radio button being selected
     */
    private void textRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textRadioButtonActionPerformed
        selectButton(textRadioButton);
    }//GEN-LAST:event_textRadioButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | UnsupportedLookAndFeelException | IllegalAccessException | InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExportDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ExportDialog dialog = new ExportDialog(new JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton cancelButton;
    private JRadioButton fileRadioButton;
    private JComboBox formatOptions;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JButton okButton;
    private JRadioButton textRadioButton;
    // End of variables declaration//GEN-END:variables
}
