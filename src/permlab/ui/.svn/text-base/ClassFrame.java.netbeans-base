package permlab.ui;

import java.awt.*;
import java.util.*;
import java.util.List;
import javax.swing.*;
import permlab.*;
import permlab.processor.PermCounter;
import permlab.property.Intersection;
import permlab.property.PermProperty;
import permlab.property.Universal;
import permlab.utilities.IOUtilities;

/**
 *
 * @author Michael Albert
 */
public class ClassFrame extends javax.swing.JFrame {

    private JFrame thisFrame;
    private ArrayList<SwingWorker> workerPool = new ArrayList<SwingWorker>();

    /**
     * Creates new form ClassEnumerationFrame
     */
    public ClassFrame() {
        initComponents();
        thisFrame = this;
        // From http://stackoverflow.com/questions/286727/java-keylistener-for-jframe-is-being-unresponsive
        KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
        manager.addKeyEventDispatcher(new HelpDispatcher("Class window", "ClassFrameHelp.html", this));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        actionButtonGroup = new javax.swing.ButtonGroup();
        formatButtonGroup = new javax.swing.ButtonGroup();
        controlPanel = new javax.swing.JPanel();
        basisPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        basisTextArea = new javax.swing.JTextArea();
        lengthField = new javax.swing.JTextField();
        lengthLabel = new javax.swing.JLabel();
        enumerateButton = new javax.swing.JButton();
        animateButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        restrictPanel = new javax.swing.JPanel();
        simplesCheckBox = new javax.swing.JCheckBox();
        involutionsCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        controlPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        controlPanel.setPreferredSize(new java.awt.Dimension(314, 500));

        basisPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Basis"));

        basisTextArea.setColumns(20);
        basisTextArea.setRows(5);
        basisTextArea.setToolTipText("Basis area. Enter one basis element per line.");
        jScrollPane1.setViewportView(basisTextArea);

        javax.swing.GroupLayout basisPanelLayout = new javax.swing.GroupLayout(basisPanel);
        basisPanel.setLayout(basisPanelLayout);
        basisPanelLayout.setHorizontalGroup(
            basisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(basisPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                .addContainerGap())
        );
        basisPanelLayout.setVerticalGroup(
            basisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(basisPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                .addContainerGap())
        );

        lengthField.setText("1-12");
        lengthField.setToolTipText("Desired lengths. Can be a mix of ranges and single values, e.g. 3, 5, 7, 10-12.");

        lengthLabel.setText("Length");

        enumerateButton.setText("Enumerate");
        enumerateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doEnumeration(evt);
            }
        });

        animateButton.setText("Animate");
        animateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doAnimation(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        restrictPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Restrict to"));

        simplesCheckBox.setText("Simples");
        simplesCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simplesCheckBoxActionPerformed(evt);
            }
        });

        involutionsCheckBox.setText("Involutions");
        involutionsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                involutionsCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout restrictPanelLayout = new javax.swing.GroupLayout(restrictPanel);
        restrictPanel.setLayout(restrictPanelLayout);
        restrictPanelLayout.setHorizontalGroup(
            restrictPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(restrictPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(restrictPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(simplesCheckBox)
                    .addComponent(involutionsCheckBox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        restrictPanelLayout.setVerticalGroup(
            restrictPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(restrictPanelLayout.createSequentialGroup()
                .addComponent(simplesCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(involutionsCheckBox)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(basisPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(controlPanelLayout.createSequentialGroup()
                                .addComponent(restrictPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(enumerateButton, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(animateButton, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(stopButton, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(controlPanelLayout.createSequentialGroup()
                                .addComponent(lengthLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lengthField)))))
                .addGap(6, 6, 6))
        );

        controlPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {animateButton, enumerateButton});

        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(basisPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lengthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lengthLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addComponent(enumerateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(animateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stopButton))
                    .addComponent(restrictPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(controlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void doEnumeration(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doEnumeration
        ClassEnumerationTask task = new ClassEnumerationTask(IOUtilities.getNumbers(lengthField.getText()));
        workerPool.add(task);
        task.execute();
    }//GEN-LAST:event_doEnumeration

    private void doAnimation(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doAnimation
        PermClassInterface theClass = getPermClassInterface();
        AnimationTask task;
        if (involutionsCheckBox.isSelected() && simplesCheckBox.isSelected()) {
            task = new AnimationTask(theClass, IOUtilities.getNumbers(lengthField.getText()), PermUtilities.SIMPLE);
        } else {
            task = new AnimationTask(theClass, IOUtilities.getNumbers(lengthField.getText()));
        }
        workerPool.add(task);
        task.execute();
    }//GEN-LAST:event_doAnimation

    private PermClassInterface getPermClassInterface() {
        PermClassInterface theClass;
        Scanner in = new Scanner(basisTextArea.getText());
        ArrayList<Permutation> basis = new ArrayList<Permutation>();
        while (in.hasNextLine()) {
            basis.add(new Permutation(in.nextLine()));
        }
        if (involutionsCheckBox.isSelected()) {
            theClass = new InvolutionPermClass(basis);
        } else if (simplesCheckBox.isSelected()) {
            theClass = new SimplePermClass(basis);
        } else {
            theClass = new PermClass(basis);
        }
        return theClass;
    }

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        for (SwingWorker task : workerPool) {
            task.cancel(true);
        }
    }//GEN-LAST:event_stopButtonActionPerformed

    private void simplesCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simplesCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_simplesCheckBoxActionPerformed

    private void involutionsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_involutionsCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_involutionsCheckBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClassFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClassFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClassFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClassFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ClassFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup actionButtonGroup;
    private javax.swing.JButton animateButton;
    private javax.swing.JPanel basisPanel;
    private javax.swing.JTextArea basisTextArea;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JButton enumerateButton;
    private javax.swing.ButtonGroup formatButtonGroup;
    private javax.swing.JCheckBox involutionsCheckBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lengthField;
    private javax.swing.JLabel lengthLabel;
    private javax.swing.JPanel restrictPanel;
    private javax.swing.JCheckBox simplesCheckBox;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables
    private StringBuilder outputText;

    private boolean wellFormattedInput() {
        if (!IOUtilities.isPermsString(basisTextArea.getText())) {
            JOptionPane.showMessageDialog(this,
                    "Improperly formatted basis.",
                    "Format error",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (!IOUtilities.isNumbersString(lengthField.getText())) {
            JOptionPane.showMessageDialog(this,
                    "Improperly formatted lengths.",
                    "Format error",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    private void doEnumeration() {
        ClassEnumerationTask task = new ClassEnumerationTask(IOUtilities.getNumbers(lengthField.getText()));
        task.execute();
    }

    private void doAnimation() {
        PermClassInterface theClass = getPermClassInterface();
        AnimationTask task;
        if (involutionsCheckBox.isSelected() && simplesCheckBox.isSelected()) {
            task = new AnimationTask(theClass, IOUtilities.getNumbers(lengthField.getText()), PermUtilities.SIMPLE);
        } else {
            task = new AnimationTask(theClass, IOUtilities.getNumbers(lengthField.getText()));
        }
        task.execute();
    }

    public void doAnimationFromTable(PermClassInterface theClass, PermProperty additionalProperty, int[] lengths) {
        AnimationTask task = new AnimationTask(theClass, lengths, additionalProperty);
        task.execute();
    }

    public void makeListFromTable(PermClassInterface theClass, PermProperty additionalProperty, int[] lengths) {
        ListTask task = new ListTask(theClass, lengths, additionalProperty);
        task.execute();
    }

    private String basisString() {
        StringBuilder result = new StringBuilder();
        Scanner in = new Scanner(basisTextArea.getText());
        while (in.hasNextLine()) {
            result.append(in.nextLine());
            if (in.hasNextLine()) {
                result.append(", ");
            }
        }
        return result.toString();
    }

    class ClassEnumerationTask extends SwingWorker<Void, long[]> {

        static final int MAX = 1000000;
        int[] lengths;
        PermClassInterface theClass;
        PermCounter proc;
        TableFrame tableFrame = null;
        TextFrame textFrame = null;
        String[] lines;
        String title;

        ClassEnumerationTask(int[] lengths) {
            Scanner in = new Scanner(basisTextArea.getText());
            ArrayList<Permutation> basis = new ArrayList<Permutation>();
            this.lengths = lengths;
            while (in.hasNextLine()) {
                basis.add(new Permutation(in.nextLine()));
            }
            initialisePermutationClass(basis);
        }

        @Override
        public Void doInBackground() {
            for (int n : lengths) {
                long[] results = null;
                if (!simplesCheckBox.isSelected()) {
                    results = new long[2 + PermUtilities.MAIN_PROPERTIES.length];
                } else {
                    results = new long[2];
                }

                results[0] = n;
                CalcRun calculation = new CalcRun(theClass, n, proc, results);
                Thread calcThread = new Thread(calculation);
                calcThread.start();

                while (!isCancelled() && !calculation.isCompleted()) {
                    int s = 0;
                    for (int i = 0; i < MAX; i++) {
                        s += i;
                    }
                }

                if (isCancelled()) {
                    calcThread.stop();
                    // System.out.println("How dare you tell me to stop!");
                    if (tableFrame == null) {
                        textFrame.getTextArea().append("\nCancelled");
                    } else {
                        String tableTitle = tableFrame.getTitleLabel().getText();
                        tableTitle += " cancelled.";
                        tableFrame.getTitleLabel().setText(tableTitle);
                        tableFrame.getTitleLabel().setForeground(Color.RED);

                    }
                    return null;
                }

                if (!simplesCheckBox.isSelected()) {
                    results[1] = proc.getCount();
                    System.arraycopy(proc.getSecondaryCounts(), 0, results, 2, results.length - 2);
                } else {
                    results[1] = proc.getCount();
                }
                proc.reset();
                publish(results);
            }
            return null;
        }

        @Override
        protected void process(List<long[]> rows) {
            for (long[] row : rows) {
                if (tableFrame == null) {
                    processToText(row);
                } else {
                    processToTable(row);

                }
            }

        }

        private void initialiseTableFrame(ArrayList<PermProperty> properties) {
            tableFrame = new TableFrame(ClassFrame.this, theClass, title, lengths, properties);
            tableFrame.setLocation(thisFrame.getX() + thisFrame.getWidth() + 10, thisFrame.getY());
            tableFrame.setVisible(true);
        }

        private void initialiseTextFrame() {
            textFrame = new TextFrame();
            textFrame.getTextArea().setFont(new Font(Font.MONOSPACED, Font.PLAIN, 12));
            textFrame.setLocation(thisFrame.getX() + thisFrame.getWidth() + 10, thisFrame.getY());
        }

        private void processToTable(long[] row) {
            int rowNumber = 0;
            while (lengths[rowNumber] != row[0]) {
                rowNumber++;
            }
            for (int i = 1; i < row.length; i++) {
                tableFrame.getModel().setValueAt(new Long(row[i]), rowNumber, i);
            }
        }

        private void processToText(long[] row) {
            int rowNumber = 0;
            while (lengths[rowNumber] != row[0]) {
                rowNumber++;
            }
            for (int i = 1; i < row.length; i++) {
                lines[i] += String.format("%11d", row[i]) + (rowNumber != lengths.length - 1 ? "," : "");
                fillFromLines();
            }
        }

        private void fillFromLines() {
            textFrame.getTextArea().append(title + "\n");
            textFrame.getTextArea().setText("");
            for (int i = 0; i < lines.length; i++) {
                textFrame.getTextArea().append(lines[i] + "\n");
            }
            textFrame.setVisible(true);
        }

        private void initialisePermutationClass(ArrayList<Permutation> basis) {
            ArrayList<PermProperty> properties = new ArrayList<PermProperty>();
            if (simplesCheckBox.isSelected()) {
                if (involutionsCheckBox.isSelected()) {
                    theClass = new InvolutionPermClass(basis);
                    proc = new PermCounter(PermUtilities.SIMPLE);
                    title = "Simple Involutions of Av(" + basisString() + ")";
                    properties.add(new Intersection(PermUtilities.INVOLUTION, PermUtilities.SIMPLE));
                } else {
                    theClass = new SimplePermClass(basis);
                    proc = new PermCounter();
                    title = "Simples of Av(" + basisString() + ")";
                    properties.add(PermUtilities.SIMPLE);
                }
            } else {
                for (PermProperty prop : PermUtilities.MAIN_PROPERTIES) {
                    properties.add(prop);
                }
                if (involutionsCheckBox.isSelected()) {
                    theClass = new InvolutionPermClass(basis);
                    proc = new PermCounter(
                            PermUtilities.INVOLUTION,
                            PermUtilities.MAIN_PROPERTIES);
                    title = "Involutions of Av(" + basisString() + ")";
                    properties.add(0, PermUtilities.INVOLUTION);
                } else {
                    theClass = new PermClass(basis);
                    proc = new PermCounter(
                            new Universal(),
                            PermUtilities.MAIN_PROPERTIES);
                    title = "Av(" + basisString() + ")";
                    properties.add(0, new Universal());
                }
            }
            initialiseTableFrame(properties);
        }
    }

    private static class CalcRun implements Runnable {

        private final long[] results;
        private final PermClassInterface theClass;
        private final int n;
        private final PermCounter proc;
        private boolean completed;

        public CalcRun(PermClassInterface theClass, int n, PermCounter proc, long[] results) {
            this.theClass = theClass;
            this.n = n;
            this.proc = proc;
            this.results = results;
            this.completed = false;
        }

        public boolean isCompleted() {
            return completed;
        }

        @Override
        public void run() {
            theClass.processPerms(n, proc);
            completed = true;
        }
    }
}