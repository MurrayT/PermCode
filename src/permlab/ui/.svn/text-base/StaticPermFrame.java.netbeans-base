package permlab.ui;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.KeyboardFocusManager;
import java.awt.event.InputEvent;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import permlab.PermUtilities;
import permlab.Permutation;
import permlab.utilities.RestrictedPermutation;
import permlab.utilities.IOUtilities;

/**
 * Display single permutations (and their extensions)
 * 
 * @author Michael Albert
 */
public class StaticPermFrame extends javax.swing.JFrame {

    private static final int DEFAULT_POINT_SIZE = 20;
    private ArrayList<RestrictedPermutation> history = new ArrayList<RestrictedPermutation>();
    private int currentPosition = -1;
    private DisplayElement highlighted = null;
    private DisplayElement location;
    private static final Color RULE_RESTRICTED = new Color(50, 50, 50, 150);
    private static final Color USER_RESTRICTED = new Color(120, 120, 120, 100);
    private static final String PSTRICKS = "PSTricks";
    private static final String SVG = "SVG";
    private static final String GIF = "GIF";
    private TextFrame exportFrame;

    /**
     * Creates new form StaticPermFrame
     */
    public StaticPermFrame() {
        initComponents();
        KeyboardFocusManager manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
        manager.addKeyEventDispatcher(new HelpDispatcher("Permutation display", "StaticPermHelp.html", this));
        avoidedPermsText.setText("");
        permText.setText("");
        setMenus();
        addPermState(new RestrictedPermutation(avoidedPermsText.getText(), permText.getText(), false));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pointPopupMenu = new javax.swing.JPopupMenu();
        delete = new javax.swing.JMenuItem();
        replacePointWithPerm = new javax.swing.JMenuItem();
        spacePopupMenu = new javax.swing.JPopupMenu();
        insertPermInSpace = new javax.swing.JMenuItem();
        insertPoint = new javax.swing.JMenuItem();
        markForbidden = new javax.swing.JMenuItem();
        markPermitted = new javax.swing.JMenuItem();
        displayPanel = new DisplayPanel();
        textPanel = new javax.swing.JPanel();
        basisUpdateButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        avoidedPermsText = new javax.swing.JTextArea();
        permTextPanel = new javax.swing.JPanel();
        permText = new javax.swing.JTextField();
        nextButton = new javax.swing.plaf.basic.BasicArrowButton(SwingConstants.EAST);
        previousButton = new javax.swing.plaf.basic.BasicArrowButton(SwingConstants.WEST);
        simpleCheckBox = new javax.swing.JCheckBox();
        exportButton = new javax.swing.JButton();
        monotoneConstraintsBox = new javax.swing.JCheckBox();

        delete.setText("jMenuItem1");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        pointPopupMenu.add(delete);

        replacePointWithPerm.setText("jMenuItem1");
        replacePointWithPerm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replacePointWithPermActionPerformed(evt);
            }
        });
        pointPopupMenu.add(replacePointWithPerm);

        insertPermInSpace.setText("jMenuItem1");
        insertPermInSpace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertPermInSpaceActionPerformed(evt);
            }
        });
        spacePopupMenu.add(insertPermInSpace);

        insertPoint.setText("jMenuItem1");
        insertPoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertPointActionPerformed(evt);
            }
        });
        spacePopupMenu.add(insertPoint);

        markForbidden.setText("jMenuItem1");
        markForbidden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                markForbiddenActionPerformed(evt);
            }
        });
        spacePopupMenu.add(markForbidden);

        markPermitted.setText("jMenuItem1");
        markPermitted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                markPermittedActionPerformed(evt);
            }
        });
        spacePopupMenu.add(markPermitted);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        displayPanel.setPreferredSize(new java.awt.Dimension(700, 700));
        displayPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                displayPanelMouseAction(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                displayPanelMouseAction(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                displayPanelMouseAction(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                displayPanelMouseExited(evt);
            }
        });
        displayPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                displayPanelMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout displayPanelLayout = new javax.swing.GroupLayout(displayPanel);
        displayPanel.setLayout(displayPanelLayout);
        displayPanelLayout.setHorizontalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        displayPanelLayout.setVerticalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 441, Short.MAX_VALUE)
        );

        textPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Basis"));

        basisUpdateButton.setText("OK");
        basisUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                basisUpdateButtonActionPerformed(evt);
            }
        });

        avoidedPermsText.setColumns(20);
        avoidedPermsText.setRows(5);
        jScrollPane2.setViewportView(avoidedPermsText);

        javax.swing.GroupLayout textPanelLayout = new javax.swing.GroupLayout(textPanel);
        textPanel.setLayout(textPanelLayout);
        textPanelLayout.setHorizontalGroup(
            textPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, textPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(textPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                    .addGroup(textPanelLayout.createSequentialGroup()
                        .addGap(0, 186, Short.MAX_VALUE)
                        .addComponent(basisUpdateButton)))
                .addContainerGap())
        );
        textPanelLayout.setVerticalGroup(
            textPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(textPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(basisUpdateButton))
        );

        permTextPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Permutation"));

        permText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                permTextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout permTextPanelLayout = new javax.swing.GroupLayout(permTextPanel);
        permTextPanel.setLayout(permTextPanelLayout);
        permTextPanelLayout.setHorizontalGroup(
            permTextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(permTextPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(permText)
                .addContainerGap())
        );
        permTextPanelLayout.setVerticalGroup(
            permTextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(permTextPanelLayout.createSequentialGroup()
                .addComponent(permText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });

        simpleCheckBox.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        simpleCheckBox.setText("Simple");
        simpleCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpleCheckBoxActionPerformed(evt);
            }
        });

        exportButton.setText("Export");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        monotoneConstraintsBox.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        monotoneConstraintsBox.setText("Show monotone constraints");
        monotoneConstraintsBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monotoneConstraintsBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(monotoneConstraintsBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(exportButton))
                            .addComponent(permTextPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(simpleCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(previousButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nextButton)
                                .addGap(44, 44, 44))))
                    .addComponent(displayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 685, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {nextButton, previousButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(displayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(permTextPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nextButton)
                            .addComponent(previousButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(exportButton)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(simpleCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(monotoneConstraintsBox))))
                    .addComponent(textPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {nextButton, previousButton});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void permTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_permTextActionPerformed
        // System.out.println(permText.getText());
        if (IOUtilities.isPermString(permText.getText())) {
//            System.out.println("Adding permutation: " + permText.getText());
            addPermState(currentState().changePerm(permText.getText()));
            return;
        }

        JOptionPane.showMessageDialog(this,
                "Improperly formatted permutation.",
                "Format error",
                JOptionPane.ERROR_MESSAGE);

    }//GEN-LAST:event_permTextActionPerformed

    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed
//        System.out.println("Previous");
        if (currentPosition > 0) {
            currentPosition--;
        }
//        System.out.println(currentPosition + " of " + history.size());
        redisplay();
    }//GEN-LAST:event_previousButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
//        System.out.println("Next");
        if (currentPosition < history.size() - 1) {
            currentPosition++;
        }
//        System.out.println(currentPosition + " of " + history.size());
        redisplay();
    }//GEN-LAST:event_nextButtonActionPerformed

    private void displayPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayPanelMouseMoved
        if (displayPanel.contains(evt.getPoint())) {
            highlighted = new DisplayElement(evt.getX(), evt.getY());
        } else {
            highlighted = null;
        }
        repaint();
    }//GEN-LAST:event_displayPanelMouseMoved

    private void displayPanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayPanelMouseExited
        highlighted = null;
        repaint();
    }//GEN-LAST:event_displayPanelMouseExited

    private void basisUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_basisUpdateButtonActionPerformed
//        System.out.println("Basis update action");
        if (IOUtilities.isPermsString(avoidedPermsText.getText())) {
//            System.out.println("Basis correctly formatted");
//            System.out.println("Basis is: " + avoidedPermsText.getText()); 
            addPermState(currentState().updateBasis(avoidedPermsText.getText()));
            return;
        }

        JOptionPane.showMessageDialog(this,
                "Improperly formatted basis.",
                "Format error",
                JOptionPane.ERROR_MESSAGE);

    }//GEN-LAST:event_basisUpdateButtonActionPerformed

    private void simpleCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpleCheckBoxActionPerformed
//        System.out.println("Check box action");
        addPermState(currentState().setSimpleState(simpleCheckBox.isSelected()));
    }//GEN-LAST:event_simpleCheckBoxActionPerformed

    private void displayPanelMouseAction(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayPanelMouseAction
        if (evt.isPopupTrigger()) {
            popupMenuHandler(evt);
            return;
        }
        if (evt.getID() == MouseEvent.MOUSE_CLICKED
                && evt.getButton() == MouseEvent.BUTTON1
                && !((evt.getModifiersEx() & InputEvent.CTRL_DOWN_MASK) == InputEvent.CTRL_DOWN_MASK)) {
            location = new DisplayElement(evt.getX(), evt.getY());
            if (!location.isPoint() && !location.isForbidden()) {
                addPointAt(location);
            }
        }
    }//GEN-LAST:event_displayPanelMouseAction

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        deletePointAt(location);
    }//GEN-LAST:event_deleteActionPerformed

    private void replacePointWithPermActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replacePointWithPermActionPerformed
        String s = (String) JOptionPane.showInputDialog(
                this,
                "Replace point with permutation:",
                "Replace point",
                JOptionPane.PLAIN_MESSAGE,
                null,
                null,
                "1");
        if (IOUtilities.isPermString(s)) {
            replacePointAt(location, new Permutation(s));
        }
    }//GEN-LAST:event_replacePointWithPermActionPerformed

    private void markForbiddenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_markForbiddenActionPerformed
        markForbiddenRegionAt(location);
    }//GEN-LAST:event_markForbiddenActionPerformed

    private void markPermittedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_markPermittedActionPerformed
        markPermittedRegionAt(location);
    }//GEN-LAST:event_markPermittedActionPerformed

    private void insertPointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertPointActionPerformed
        addPointAt(location);
    }//GEN-LAST:event_insertPointActionPerformed

    private void insertPermInSpaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertPermInSpaceActionPerformed
        String s = (String) JOptionPane.showInputDialog(
                this,
                "Replace space with permutation:",
                "Replace space",
                JOptionPane.PLAIN_MESSAGE,
                null,
                null,
                "1");
        if (IOUtilities.isPermString(s)) {
            replaceSpaceAt(location, new Permutation(s));
        }
    }//GEN-LAST:event_insertPermInSpaceActionPerformed

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        Object[] possibilities = {PSTRICKS, SVG, GIF};
        String s = (String) JOptionPane.showInputDialog(
                this,
                "Choose your export format:",
                "Export dialog",
                JOptionPane.PLAIN_MESSAGE,
                null,
                possibilities,
                PSTRICKS);
        processExport(s);
    }//GEN-LAST:event_exportButtonActionPerformed

    private void monotoneConstraintsBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monotoneConstraintsBoxActionPerformed
        repaint();
    }//GEN-LAST:event_monotoneConstraintsBoxActionPerformed

    private void popupMenuHandler(java.awt.event.MouseEvent evt) {
        if (evt.isPopupTrigger()) {
            location = new DisplayElement(evt.getX(), evt.getY());
            if (!location.isPoint()) {
                spacePopupMenu.show(evt.getComponent(),
                        evt.getX(), evt.getY());
            } else {
                pointPopupMenu.show(evt.getComponent(),
                        evt.getX(), evt.getY());
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;


                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StaticPermFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StaticPermFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StaticPermFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StaticPermFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new StaticPermFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea avoidedPermsText;
    private javax.swing.JButton basisUpdateButton;
    private javax.swing.JMenuItem delete;
    private javax.swing.JPanel displayPanel;
    private javax.swing.JButton exportButton;
    private javax.swing.JMenuItem insertPermInSpace;
    private javax.swing.JMenuItem insertPoint;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem markForbidden;
    private javax.swing.JMenuItem markPermitted;
    private javax.swing.JCheckBox monotoneConstraintsBox;
    private javax.swing.JButton nextButton;
    private javax.swing.JTextField permText;
    private javax.swing.JPanel permTextPanel;
    private javax.swing.JPopupMenu pointPopupMenu;
    private javax.swing.JButton previousButton;
    private javax.swing.JMenuItem replacePointWithPerm;
    private javax.swing.JCheckBox simpleCheckBox;
    private javax.swing.JPopupMenu spacePopupMenu;
    private javax.swing.JPanel textPanel;
    // End of variables declaration//GEN-END:variables

    private void addPermState(RestrictedPermutation newState) {
//        System.out.println("Adding state: " + newState.toString());
        while (history.size() > currentPosition + 1) {
            history.remove(history.size() - 1);
        }
        currentPosition++;
        history.add(newState);
        redisplay();
    }

    private void redisplay() {
        avoidedPermsText.setText(currentState().getBasisString());
        permText.setText(currentState().getPermString());
        simpleCheckBox.setSelected(currentState().isSimple());
        repaint();
    }

    private RestrictedPermutation currentState() {
        return history.get(currentPosition);
    }

    private void addPointAt(DisplayElement location) {
        addPermState(currentState().addPoint(location.i, location.j));
    }

    private void setMenus() {
        delete.setText("Delete point");
        replacePointWithPerm.setText("Replace with permutation");
        insertPermInSpace.setText("Insert Permutation");
        insertPoint.setText("Insert point");
        markForbidden.setText("Forbid insertion");
        markPermitted.setText("Permit insertion");
    }

    private void deletePointAt(DisplayElement location) {
        addPermState(currentState().deletePointAt(location.i));
    }

    private void replacePointAt(DisplayElement location, Permutation rep) {
        addPermState(currentState().replacePoint(location.i, rep));
    }

    private void markForbiddenRegionAt(DisplayElement location) {
        addPermState(currentState().addUserForbiddenPair(location.i, location.j));
    }

    private void markPermittedRegionAt(DisplayElement location) {
        addPermState(currentState().removeUserForbiddenPair(location.i, location.j));
    }

    private void replaceSpaceAt(DisplayElement location, Permutation rep) {
        addPermState(currentState().replaceSpace(location.i, location.j, rep));
    }

    private void processExport(String s) {
        StringBuilder output = new StringBuilder();
        if (s.equals(PSTRICKS)) {
            output.append(currentState().toPSTricks());
        } else {
            output.append("Sorry, ");
            output.append(s);
            output.append(" format is not yet supported.");
        }
        if (exportFrame == null) {
            exportFrame = new TextFrame(output.toString());
            exportFrame.setLocation(this.getX() + this.getWidth() + 10, this.getY());
        } else {
            exportFrame.addText(output.toString());
        }
        exportFrame.setVisible(true);
    }

    public boolean requiresSimple() {
        return simpleCheckBox.isSelected();
    }

    private class DisplayPanel extends JPanel {

        public DisplayPanel() {
        }

        @Override
        public void paint(Graphics g) {
            g.setColor(Color.WHITE);
            g.fillRect(0, 0, getWidth(), getHeight());
            if (currentState().getPerm() != null) {
                int dx = getWidth() / (currentState().getPerm().length() + 1);
                int dy = getHeight() / (currentState().getPerm().length() + 1);
                int r = Math.min(Math.min(dx, dy) / 4, DEFAULT_POINT_SIZE);
                for (int i = 0; i <= currentState().getPerm().length(); i++) {
                    for (int j = 0; j <= currentState().getPerm().length(); j++) {
                        if (currentState().userForbids(i, j)) {
                            // shadeSquare(g, i, j, dx, dy, Color.DARK_GRAY);
                            shadeSquare(g, i, j, dx, dy, USER_RESTRICTED);

                        }
                        if (currentState().propertiesForbid(i, j)) {
                            // shadeSquare(g, i, j, dx, dy, Color.LIGHT_GRAY);
//                            System.out.println("Shading " + i + " " + j + " " + "from rule");
                            shadeSquare(g, i, j, dx, dy, RULE_RESTRICTED);
                        }
                        if (monotoneConstraintsBox.isSelected()) {
                            int constraint = currentState().montoneRequirements(i, j);
                            switch (constraint) {
                                case RestrictedPermutation.SINGLETON:
                                    addCircle(g, i, j, dx, dy, r); break;
                                case RestrictedPermutation.INCREASING:
                                    addIncreasing(g, i, j, dx, dy); break;
                                case RestrictedPermutation.DECREASING:
                                    addDecreasing(g, i, j, dx, dy); break;
                                default:
                                    // Do nothing
                            }
                        }
                    }
                }
                for (int i = 0; i < currentState().getPerm().length(); i++) {
                    int x = (i + 1) * dx;
                    int y = getHeight() - (currentState().getPerm().elements[i] + 1) * dy;
                    g.setColor(Color.BLACK);
                    g.drawLine(x, 0, x, getHeight());
                    g.drawLine(0, y, getWidth(), y);
                    g.setColor(currentState().hasProperties() ? Color.BLACK : Color.RED);
                    g.fillOval(x - r, y - r, 2 * r, 2 * r);
                }

                if (highlighted != null) {
                    if (highlighted.isPoint()) {
                        g.setColor(Color.YELLOW);
                        int x = (highlighted.i + 1) * dx;
                        int y = getHeight() - (currentState().getPerm().elements[highlighted.i] + 1) * dy;
                        g.fillOval(x - r, y - r, 2 * r, 2 * r);
                    } else {
                        g.setColor(Color.BLUE);
                        g.drawRect(highlighted.i * dx + r, getHeight() - (highlighted.j + 1) * dy + r, dx - 2 * r, dy - 2 * r);
                    }
                }
            }
        }

        private void shadeSquare(Graphics g, int i, int j, int dx, int dy, Color c) {
            g.setColor(c);
            int width = (i != currentState().getPerm().length()) ? dx : getWidth() - i * dx;
            int top = (j != currentState().getPerm().length()) ? getHeight() - (j + 1) * dy : 0;
            int height = (j != currentState().getPerm().length()) ? dy : getHeight() - currentState().getPerm().length() * dy;
            g.fillRect(i * dx, top, width, height);
        }

        private void addCircle(Graphics g, int i, int j, int dx, int dy, int r) {
            g.setColor(Color.BLACK);
            g.drawOval(i*dx + dx/2 - r/2, getHeight()-(j)*dy - dy/2 - r/2, r, r);
        }

        private void addIncreasing(Graphics g, int i, int j, int dx, int dy) {
            g.setColor(Color.BLACK);
            g.drawLine(i*dx + dx/4, getHeight()-(j)*dy - dy/4, i*dx + 3*dx/4, getHeight()-(j)*dy - 3*dy/4);
        }

        private void addDecreasing(Graphics g, int i, int j, int dx, int dy) {
            g.setColor(Color.BLACK);
            g.drawLine(i*dx + dx/4, getHeight()-(j)*dy - 3*dy/4, i*dx + 3*dx/4, getHeight()-(j)*dy - dy/4);
        }
    }

    private class DisplayElement {

        private int x;
        private int y;
        private int dx;
        private int dy;
        private int r;
        private int i;
        private int j;

        public DisplayElement(int screenX, int screenY) {
            this.x = screenX;
            this.y = displayPanel.getHeight() - screenY;
            dx = displayPanel.getWidth() / (currentState().getPerm().length() + 1);
            dy = displayPanel.getHeight() / (currentState().getPerm().length() + 1);
            r = Math.min(Math.min(dx, dy) / 4, DEFAULT_POINT_SIZE);
            i = this.x / dx;
            j = this.y / dy;
        }

        private boolean isPoint() {
            int tx = (x + r) / dx;
            int ty = (y + r) / dy;
            if (x - tx * dx > r || y - ty * dy > r) {
                return false;
            }
            tx--;
            ty--;
            if (tx < 0 || tx >= currentState().getPerm().length()) {
                return false;
            }
            if (currentState().getPerm().elements[tx] != ty) {
                return false;
            }
            i = tx;
            j = ty;
            return true;
        }

        private boolean isForbidden() {
            return (currentState().forbids(i, j));
        }
    }
}
